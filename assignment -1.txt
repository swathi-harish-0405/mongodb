Q) title : “Fight Club “,
writer :” Chuck Palahniuko”, 
year : 1999 
actors : [ “Brad Pitt”,” Edward Norton” ]
A)	db.movies.insert({ title : "Fight Club",
writer : "Chuck Palahniuko",
year : 1999,
actors : [
 "Brad Pitt","Edward Norton"]})
Q)  title : Pulp Fiction 
writer : Quentin Tarantino 
year : 1994 
actors : [ John Travolta Uma Thurman ]

A)	 db.movies.insert({ title : "Pulp Fiction",
writer :" Quentin Tarantino",
year : 1994,
actors : [
 "John Travolta",
 "Uma Thurman"})

title : Inglorious Basterds 
writer : Quentin Tarantino 
year : 2009
 actors : [ Brad Pitt Diane Kruger Eli Roth ]
A)	db.movies.insert({title : "Inglorious Basterds",
writer : "Quentin Tarantino",
year : 2009,
actors : [
 "Brad Pitt",
 "Diane Kruger",
 "Eli Roth"]})

 title : The Hobbit: An Unexpected Journey 
writer : J.R.R. Tolkein
 year : 2012 
franchise : The Hobbit
A)	db.movies.insert({ title : "The Hobbit: An Unexpected Journey ",
writer : "J.R.R. Tolkein",
 year : 2012,
franchise : "The Hobbit"})

title : The Hobbit: The Desolation of Smaug 
writer : J.R.R. Tolkein 
year : 2013
 franchise : The Hobbit
A)	db.movies.insert({title : "The Hobbit: The Desolation of Smaug",
writer : "J.R.R. Tolkein",
year : 2013,
franchise : "The Hobbit"})

 title : The Hobbit: The Battle of the Five Armies 
writer : J.R.R. Tolkein
 year : 2012 
franchise : The Hobbit 
synopsis : Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness.
A)	db.movies.insert({  title : "The Hobbit: The Battle of the Five Armies", 
writer : "J.R.R. Tolkein",
 year : 2012,
franchise : "The Hobbit ",
synopsis : "Bilbo and Company are forced to engage in a war against an array of combatants and keep the Lonely Mountain from falling into the hands of a rising darkness"})

 title : Pee Wee Herman's Big Adventure
A)	db.movies.insert({  title : "Pee Wee Herman's Big Adventure"})

 title : Avatar
A)	db.movies.insert({  title : "Avatar"})


Query / Find Documents 
query the movies collection to 
1. get all documents .
A) db.movies.find()

2. get all documents with writer set to "Quentin Tarantino" 
A) db.movies.find({writer : "Quentin Tarantino"})
3. get all documents where actors include "Brad Pitt" 
A) db.movies.find({actors:"Brad Pitt"})
4. get all documents with franchise set to "The Hobbit" 
A) db.movies.find({franchise:"The Hobbit"})
5. get all movies released in the 90s 
A) db.movies.find({year :{$lt:2000} })
6. get all movies released before the year 2000 or after 2010 
db.movies.find({$or: [{year :{$lt:2000}},{year:{$gt:2010} }] })



Update Documents 
1.	add a synopsis to "The Hobbit: An Unexpected Journey" : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." 
A) db.movies.update({title : "The Hobbit: An Unexpected Journey "},{$set:{synopsis  : "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." }})
2. add a synopsis to "The Hobbit: The Desolation of Smaug" : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." 
A) db.movies.update({title : "The Hobbit: The Desolation of Smaug"},{$set:{synopsis  : "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." }})



3. add an actor named "Samuel L. Jackson" to the movie "Pulp Fiction" 

A)db.movies.update({title : "Pulp Fiction" },{$set:{actor  : "Samuel L. Jackson" }})

Delete Documents 
1.	delete the movie "Pee Wee Herman's Big Adventure" 
A) db.movies.remove({title : "Pee Wee Herman's Big Adventure"})
2. delete the movie "Avatar" 
A)db.movies.remove({title : "Avatar"})


Text Search 
1.	find all movies that have a synopsis that contains the word "Bilbo" 
A) db.movies.find({synopsis:{$regex : "Bilbo"}})
2. find all movies that have a synopsis that contains the word "Gandalf" 
A) db.movies.find({synopsis:{$regex : "Gandalf"}})
3. find all movies that have a synopsis that contains the word "Bilbo" and not the word "Gandalf" 
A) db.movies.find({$and: [{synopsis:{ $not:{$regex : "Gandalf"}}},{synopsis:{$regex : "Bilbo"}} ]})
4. find all movies that have a synopsis that contains the word "dwarves" or "hobbit" 
A)db.movies.find({$or: [{synopsis:{ $regex : "dwarves"}},{synopsis:{$regex : "hobbit"}} ]})

5. find all movies that have a synopsis that contains the word "gold" and "dragon" 
A) db.movies.find({$and: [{synopsis:{ $regex : "gold"}},{synopsis:{$regex : "dragon"}} ]})



Relationships 
Insert the following documents into a users collection
Q) username : "GoodGuyGreg",
    first_name : "Good Guy", 
    last_name : "Greg" 

A)	db.users.insert({username : "GoodGuyGreg",
    first_name : "Good Guy",last_name : "Greg" })
 Q)  username : "ScumbagSteve",
    full_name : 
     first : "Scumbag",  
     last : "Steve"

A)	db.users.insert({username : "ScumbagSteve",
    full_name : " ",
    first : "Scumbag", 
    last : "Steve" 
    })
Insert the following documents into a posts collection 
username : GoodGuyGreg 
title : Passes out at party 
body : Wakes up early and cleans house

A)	db.posts.insert({username : "GoodGuyGreg",
title : "Passes out at party",
body : "Wakes up early and cleans house"})

username : "GoodGuyGreg", 
title : "Steals your identity", 
body : "Raises your credit score"

db.posts.insert({username :8] "GoodGuyGreg", 
title : "Steals your identity", 
body : "Raises your credit score"})

username : "GoodGuyGreg", 
title : "Reports a bug in your code", 
body : "Sends you a Pull Request"

db.posts.insert({username : "GoodGuyGreg", 
title : "Reports a bug in your code", 
body : "Sends you a Pull Request"})


username : "ScumbagSteve", 
title : "Borrows something", 
body : "Sells it"

db.posts.insert({username : "ScumbagSteve", 
title : "Borrows something", 
body : "Sells it"
})

username : "ScumbagSteve", 
title : "Borrows everything", 
body : "The end"

db.posts.insert({username : "ScumbagSteve", 
title : "Borrows everything", 
body : "The end"})

username : "ScumbagSteve", 
title : "Forks your repo on github", 
body : "Sets to private"

db.posts.insert({username : "ScumbagSteve", 
title : "Forks your repo on github", 
body : "Sets to private"})

Insert the following documents into a comments collection 
username : GoodGuyGreg 
comment : Hope you got a good deal! 
post : 5f96aaf9f2515def5748c5e8

where [post_obj_id] is the ObjectId of the posts document: "Borrows something" 
db.comments.insert({username : "GoodGuyGreg", 
comment : "Hope you got a good deal!",
post : "5f96aaf9f2515def5748c5e8"})

username : GoodGuyGreg 
comment : What's mine is yours! 
post : 5f96ab1cf2515def5748c5e9 

where [post_obj_id] is the ObjectId of the posts document: "Borrows everything" 
db.comments.insert({username : "GoodGuyGreg", 
comment : "What's mine is yours!", 
post : "5f96ab1cf2515def5748c5e9" })

username : GoodGuyGreg 
comment : Don't violate the licensing agreement! 
post : 5f96ab3bf2515def5748c5ea
where [post_obj_id] is the ObjectId of the posts document: "Forks your repo on github 

db.comments.insert({username : "GoodGuyGreg",
comment : "Don't violate the licensing agreement!",
post : "5f96ab3bf2515def5748c5ea"})

username : ScumbagSteve 
comment : It still isn't clean 
post : 5f96a9ebf2515def5748c5e5
where [post_obj_id] is the ObjectId of the posts document: "Passes out at party" 

db.comments.insert({username : "ScumbagSteve", 
comment : "It still isn't clean", 
post : "5f96a9ebf2515def5748c5e5"
})

username : ScumbagSteve 
comment : Denied your PR cause I found a hack 
post : 5f96aacbf2515def5748c5e7
where [post_obj_id] is the ObjectId of the posts document: "Reports a bug in your code"
db.comments.insert({username : "ScumbagSteve",
comment : "Denied your PR cause I found a hack", 
post : "5f96aacbf2515def5748c5e7"

})

Querying related collections 
1.	find all users 
db.users.find()
2.	find all posts 
db.posts.find()
3.	find all posts that was authored by "GoodGuyGreg" 
db.posts.find({username : "GoodGuyGreg"})
4.	find all posts that was authored by "ScumbagSteve"
 db.posts.find({username : "ScumbagSteve"})
5.	find all comments 
db.comments.find()
6.	find all comments that was authored by "GoodGuyGreg" 
db.comments.find({username : "GoodGuyGreg"})
7.	find all comments that was authored by "ScumbagSteve" 
db.comments.find({username : "ScumbagSteve"})
8. find all comments belonging to the post "Reports a bug in your code" db.comments.find({post:"5f96ab1cf2515def5748c5e9"})
